{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","calculateTimeLeft","timeLeft","useState","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iKA0CeA,MAvCf,WAEE,IAAMC,EAAoB,WACxB,IAAIC,EAAW,GAEf,OADAA,GAAsB,GAIxB,EAAgCC,mBAASF,KAAzC,mBAAOC,EAAP,KAAiBE,EAAjB,KAGAC,qBAAU,WACRC,YAAW,WACTF,EAAYH,OACX,QAGL,IAAMM,EAAkB,GAaxB,OAXAC,OAAOC,KAAKP,GAAUQ,SAAQ,SAACC,GACxBT,EAASS,IAIdJ,EAAgBK,KACd,iCACGV,EAASS,GADZ,IACwBA,EAAU,WAKpC,gCACE,6CACA,mDACCJ,EAAgBM,OAASN,EAAkB,kDCzBnCO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e43fa65f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n//import \"./App.css\";\r\n\r\nfunction App() {\r\n\t\r\n  const calculateTimeLeft = () => {\r\n    let timeLeft = 60;\r\n    timeLeft = timeLeft - 1;\r\n    return timeLeft;\r\n  };\r\n\r\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\r\n  //const [year] = useState(new Date().getFullYear());\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTimeLeft(calculateTimeLeft());\r\n    }, 1000);\r\n  });\r\n\r\n  const timerComponents = [];\r\n\r\n  Object.keys(timeLeft).forEach((interval) => {\r\n    if (!timeLeft[interval]) {\r\n      return;\r\n    }\r\n\r\n    timerComponents.push(\r\n      <span>\r\n        {timeLeft[interval]} {interval}{\" \"}\r\n      </span>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <h1>Colin Timer</h1>\r\n      <h2>With React Hooks!</h2>\r\n      {timerComponents.length ? timerComponents : <span>Time's up!</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}