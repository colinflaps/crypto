{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","countdown","setCountdownDate","count","useEffect","setInterval","setNewTime","console","log","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iKA0CeA,MAvCf,WAEE,MAAoCC,mBAAS,IAA7C,mBAAKC,EAAL,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,GAAnC,mBACC,GADD,UAC2BA,mBAAS,IAAnC,mBAAOG,EAAP,UAEDC,qBAAU,WACRC,aAAY,kBAAMC,MAAc,OAE/B,IAED,IAAMA,EAAa,WAErBJ,EAAiBD,KACjBM,QAAQC,IAAIP,IAWZ,OACE,gCACE,iDACD,qBAAKQ,UAAU,eAAf,SACK,qBAAKA,UAAU,OAAf,SAAuBR,MAH7B,IAKF,6CAAgBE,EAAhB,YACI,wBAAQO,QAAS,kBAAMR,EAAiB,KAAxC,uBCvBSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.deb28cb0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n//import \"./App.css\";\r\n\r\nfunction App() {\r\n\t\r\n  let [countdown, setCountdownDate] = useState(60);\r\n  const [state, setState] = useState(0);\r\n   const [count, setCount] = useState(0);\r\n   \r\n  useEffect(() => {\r\n    setInterval(() => setNewTime(), 1000);\r\n\t//setCountdownDate(countdown++)\r\n  }, []);\r\n  \r\n    const setNewTime = () => {\r\n\t\t\r\n\t\tsetCountdownDate(countdown--)\t\r\n\t\tconsole.log(countdown);\r\n\r\n\t\t\r\n\t\t\r\n\t\t\r\n  };\r\n  \r\n  //setCountdownDate(countdown + 1);\r\n\t\r\n\t\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Colin Timer3112</h1>\r\n\t    <div className='time-section'>\r\n          <div className='time'>{countdown}</div>\r\n        </div>}\r\n\t <p>You clicked {count} times</p>\r\n      <button onClick={() => setCountdownDate(60)}>\r\n        reset\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}